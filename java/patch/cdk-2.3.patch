diff --git a/base/core/src/main/java/org/openscience/cdk/CDKConstants.java b/base/core/src/main/java/org/openscience/cdk/CDKConstants.java
index 95f6308ae2..a0b3c0d194 100644
--- a/base/core/src/main/java/org/openscience/cdk/CDKConstants.java
+++ b/base/core/src/main/java/org/openscience/cdk/CDKConstants.java
@@ -425,6 +425,9 @@ public class CDKConstants {
     public static final String      CTAB_SGROUPS                 = "cdk:CtabSgroups";
 
 
+    public static final String      SPIN_MULTIPLICITY            = "cdk:SpinMultiplicity";
+
+
     /**
      * Property for reaction objects where the conditions of reactions can be placed.
      */
diff --git a/base/core/src/main/java/org/openscience/cdk/atomtype/CDKAtomTypeMatcher.java b/base/core/src/main/java/org/openscience/cdk/atomtype/CDKAtomTypeMatcher.java
index b08e73d76f..d224dab775 100755
--- a/base/core/src/main/java/org/openscience/cdk/atomtype/CDKAtomTypeMatcher.java
+++ b/base/core/src/main/java/org/openscience/cdk/atomtype/CDKAtomTypeMatcher.java
@@ -494,7 +494,7 @@ public class CDKAtomTypeMatcher implements IAtomTypeMatcher {
     private Order getMaximumBondOrder(List<IBond> connectedBonds) {
     	IBond.Order max = IBond.Order.SINGLE;
     	for (IBond bond : connectedBonds) {
-            if (bond.getOrder().numeric() > max.numeric())
+            if (bond.getOrder() != null && bond.getOrder().numeric() > max.numeric())
             	max = bond.getOrder();
         }
         return max;
diff --git a/base/core/src/main/java/org/openscience/cdk/config/IsotopeFactory.java b/base/core/src/main/java/org/openscience/cdk/config/IsotopeFactory.java
index 90d3e5effc..f30cf1139f 100644
--- a/base/core/src/main/java/org/openscience/cdk/config/IsotopeFactory.java
+++ b/base/core/src/main/java/org/openscience/cdk/config/IsotopeFactory.java
@@ -215,7 +215,30 @@ public abstract class IsotopeFactory {
             if (major != null)
                 this.majorIsotope[elem] = major;
             else
-                logger.error("Could not find major isotope for: ", elem);
+                switch(elem) {
+                    // return InChI variant
+                    case 43:return getIsotope("Tc", 98);
+                    case 61:return getIsotope("Pm", 145);
+                    case 84:return getIsotope("Po", 209);
+                    case 85:return getIsotope("At", 210);
+                    case 86:return getIsotope("Rn", 222);
+                    case 87:return getIsotope("Fr", 223);
+                    case 88:return getIsotope("Ra", 226);
+                    case 89:return getIsotope("Ac", 227);
+                    case 93:return getIsotope("Np", 237);
+                    case 94:return getIsotope("Pu", 244);
+                    case 95:return getIsotope("Am", 243);
+                    case 96:return getIsotope("Cm", 247);
+                    case 97:return getIsotope("Bk", 247);
+                    case 98:return getIsotope("Cf", 251);
+                    case 99:return getIsotope("Es", 252);
+                    case 100:return getIsotope("Fm", 257);
+                    case 101:return getIsotope("Md", 258);
+                    case 102:return getIsotope("No", 259);
+                    case 103:return getIsotope("Lr", 260);
+                    case 104:return getIsotope("Rf", 261);
+                    default: logger.error("Could not find major isotope for: ", elem);
+                }
         }
         return clone(major);
     }
diff --git a/base/core/src/main/java/org/openscience/cdk/graph/Cycles.java b/base/core/src/main/java/org/openscience/cdk/graph/Cycles.java
index ef7960ff86..c841b3cc37 100644
--- a/base/core/src/main/java/org/openscience/cdk/graph/Cycles.java
+++ b/base/core/src/main/java/org/openscience/cdk/graph/Cycles.java
@@ -746,7 +746,7 @@ public final class Cycles {
             /** {@inheritDoc} */
             @Override
             int[][] apply(int[][] graph, int length) throws Intractable {
-                final int threshold = 684; // see. AllRingsFinder.Threshold.Pubchem_99
+                final int threshold = 3072; // see. AllRingsFinder.Threshold.Pubchem_994
                 AllCycles ac = new AllCycles(graph, Math.min(length, graph.length), threshold);
                 if (!ac.completed())
                     throw new Intractable("A large number of cycles were being generated and the"
@@ -807,7 +807,7 @@ public final class Cycles {
             /** {@inheritDoc} */
             @Override
             int[][] apply(int[][] graph, int length) throws Intractable {
-                final int threshold = 684; // see. AllRingsFinder.Threshold.Pubchem_99
+                final int threshold = 3072; // see. AllRingsFinder.Threshold.Pubchem_994
                 AllCycles ac = new AllCycles(graph, Math.min(length, graph.length), threshold);
 
                 return ac.completed() ? ac.paths() : VERTEX_SHORT.apply(graph, length);
@@ -978,8 +978,8 @@ public final class Cycles {
 
         private final int predefinedLength;
 
-        // see. AllRingsFinder.Threshold.Pubchem_99
-        private final int threshold = 684;
+        // see. AllRingsFinder.Threshold.Pubchem_994
+        private final int threshold = 3072;
 
         private AllUpToLength(int length) {
             this.predefinedLength = length;
diff --git a/base/standard/src/main/java/org/openscience/cdk/aromaticity/DaylightModel.java b/base/standard/src/main/java/org/openscience/cdk/aromaticity/DaylightModel.java
index e0cf8f0de9..2833f41b15 100644
--- a/base/standard/src/main/java/org/openscience/cdk/aromaticity/DaylightModel.java
+++ b/base/standard/src/main/java/org/openscience/cdk/aromaticity/DaylightModel.java
@@ -99,6 +99,7 @@ final class DaylightModel extends ElectronDonation {
             atomIndex.put(a, i);
             degree[i] = checkNotNull(a.getImplicitHydrogenCount(),
                     "Aromaticity model requires implicit hydrogen count is set.");
+            bondOrderSum[i] = degree[i];
         }
 
         // for each bond we increase the degree count and check for cyclic and
@@ -141,7 +142,7 @@ final class DaylightModel extends ElectronDonation {
 
             // abnormal valence, usually indicated a radical. these cause problems
             // with kekulisations
-            int bondedValence = bondOrderSum[i] + container.getAtom(i).getImplicitHydrogenCount();
+            int bondedValence = bondOrderSum[i];
             if (!normal(element, charge, bondedValence)) {
                 electrons[i] = -1;
             }
diff --git a/base/standard/src/main/java/org/openscience/cdk/graph/invariant/Canon.java b/base/standard/src/main/java/org/openscience/cdk/graph/invariant/Canon.java
index 07f8ee2137..73d426d4b0 100644
--- a/base/standard/src/main/java/org/openscience/cdk/graph/invariant/Canon.java
+++ b/base/standard/src/main/java/org/openscience/cdk/graph/invariant/Canon.java
@@ -280,6 +280,9 @@ public final class Canon {
             System.arraycopy(nextVs, 0, currVs, 0, nnu);
         }
 
+        if(symmetry == null)
+            symmetry = new long[0];
+
         return symmetry;
     }
 
@@ -341,6 +344,7 @@ public final class Canon {
             int expH = 0;
             int elem = atomicNumber(atom);
             int chg = charge(atom);
+            int mass = atom.getMassNumber() != null ? atom.getMassNumber() : 0;
 
             // count non-suppressed (explicit) hydrogens
             for (int w : graph[v])
@@ -358,6 +362,8 @@ public final class Canon {
             label |= Math.abs(chg) & 0x3;
             label <<= 4; // hydrogen count <= 15 (4 bits)
             label |= impH + expH & 0xf;
+            label <<= 10;
+            label |= mass;
 
             labels[v] = label;
         }
diff --git a/base/standard/src/main/java/org/openscience/cdk/stereo/StereoElementFactory.java b/base/standard/src/main/java/org/openscience/cdk/stereo/StereoElementFactory.java
index 09c723bed9..9d19ddb706 100644
--- a/base/standard/src/main/java/org/openscience/cdk/stereo/StereoElementFactory.java
+++ b/base/standard/src/main/java/org/openscience/cdk/stereo/StereoElementFactory.java
@@ -46,6 +46,7 @@ import java.util.Set;
 import static org.openscience.cdk.graph.GraphUtil.EdgeToBondMap;
 import static org.openscience.cdk.interfaces.IBond.Stereo.DOWN;
 import static org.openscience.cdk.interfaces.IBond.Stereo.DOWN_INVERTED;
+import static org.openscience.cdk.interfaces.IBond.Stereo.E_OR_Z;
 import static org.openscience.cdk.interfaces.IDoubleBondStereochemistry.Conformation;
 import static org.openscience.cdk.interfaces.ITetrahedralChirality.Stereo;
 
@@ -285,7 +286,7 @@ public abstract class StereoElementFactory {
                         IBond bond = bondMap.get(v, w);
                         if (w > v && bond.getOrder() == IBond.Order.DOUBLE) {
                             if (centers.elementType(w) == Stereocenters.Type.Tricoordinate
-                                && centers.isStereocenter(w) && !isInSmallRing(bond, 7)) {
+                                && centers.isStereocenter(w) /*&& !isInSmallRing(bond, 7)*/) {
                                 IStereoElement element = createGeometric(v, w, centers);
                                 if (element != null) elements.add(element);
                             }
@@ -773,6 +774,9 @@ public abstract class StereoElementFactory {
 
             if (hasUnspecifiedParity(focus)) return null;
 
+            if(container.getConnectedBondsCount(focus) != 2)
+                return null;
+
             IAtom[] terminals = ExtendedTetrahedral.findTerminalAtoms(container, focus);
 
             int t0 = container.indexOf(terminals[0]);
@@ -795,6 +799,7 @@ public abstract class StereoElementFactory {
                 if (w == v) continue;
                 if (bond.getOrder() != IBond.Order.SINGLE) continue;
                 if (isUnspecified(bond)) return null;
+                if (n == 2) return null;
                 neighbors[n] = container.getAtom(w);
                 elevation[n] = elevationOf(terminals[0], bond);
                 n++;
@@ -806,6 +811,7 @@ public abstract class StereoElementFactory {
                 IBond bond = bondMap.get(t1, w);
                 if (bond.getOrder() != IBond.Order.SINGLE) continue;
                 if (isUnspecified(bond)) return null;
+                if (n == 4) return null;
                 neighbors[n] = container.getAtom(w);
                 elevation[n] = elevationOf(terminals[1], bond);
                 n++;
@@ -831,6 +837,10 @@ public abstract class StereoElementFactory {
             if ((dbs.size() & 0x1) == 0)
                 return null;
 
+            for(IBond bond : dbs)
+                if(bond.getStereo() == E_OR_Z)
+                    return null;
+
             IBond   focus    = dbs.get(dbs.size()/2);
             IBond[] carriers = new IBond[2];
             int     config   = 0;
diff --git a/base/standard/src/main/java/org/openscience/cdk/stereo/Stereocenters.java b/base/standard/src/main/java/org/openscience/cdk/stereo/Stereocenters.java
index 06a6113e57..237b49d48f 100644
--- a/base/standard/src/main/java/org/openscience/cdk/stereo/Stereocenters.java
+++ b/base/standard/src/main/java/org/openscience/cdk/stereo/Stereocenters.java
@@ -702,7 +702,7 @@ public final class Stereocenters {
         if (getRingDegree(container.indexOf(beg)) < 3 &&
             getRingDegree(container.indexOf(end)) < 3)
             return false;
-        boolean[] avisit = new boolean[container.getBondCount()];
+        boolean[] avisit = new boolean[container.getAtomCount()];
         avisit[container.indexOf(beg)] = true;
         avisit[container.indexOf(end)] = true;
         int count = 0;
diff --git a/descriptor/cip/src/main/java/org/openscience/cdk/geometry/cip/rules/MassNumberRule.java b/descriptor/cip/src/main/java/org/openscience/cdk/geometry/cip/rules/MassNumberRule.java
index 51a7440b85..79fadebaaa 100644
--- a/descriptor/cip/src/main/java/org/openscience/cdk/geometry/cip/rules/MassNumberRule.java
+++ b/descriptor/cip/src/main/java/org/openscience/cdk/geometry/cip/rules/MassNumberRule.java
@@ -28,6 +28,7 @@ import java.io.IOException;
 import org.openscience.cdk.config.Isotopes;
 import org.openscience.cdk.config.IsotopeFactory;
 import org.openscience.cdk.geometry.cip.ILigand;
+import org.openscience.cdk.interfaces.IIsotope;
 import org.openscience.cdk.tools.ILoggingTool;
 import org.openscience.cdk.tools.LoggingToolFactory;
 
@@ -63,7 +64,9 @@ class MassNumberRule implements ISequenceSubRule<ILigand> {
         Integer massNumber = ligand.getLigandAtom().getMassNumber();
         if (massNumber != null) return massNumber;
         if (factory == null) return 0;
-        return factory.getMajorIsotope(ligand.getLigandAtom().getSymbol()).getMassNumber();
+        IIsotope isotope = factory.getMajorIsotope(ligand.getLigandAtom().getSymbol());
+        if (isotope == null) return 0;
+        return isotope.getMassNumber();
     }
 
 }
diff --git a/pom.xml b/pom.xml
index ee9f9b4aa6..9900ee472a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -27,6 +27,7 @@
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
+	    <maven.test.skip>true</maven.test.skip>
     </properties>
 
     <licenses>
diff --git a/storage/ctab/src/main/java/org/openscience/cdk/io/MDLV2000Reader.java b/storage/ctab/src/main/java/org/openscience/cdk/io/MDLV2000Reader.java
index 6a3202d4e1..24d4f411e6 100644
--- a/storage/ctab/src/main/java/org/openscience/cdk/io/MDLV2000Reader.java
+++ b/storage/ctab/src/main/java/org/openscience/cdk/io/MDLV2000Reader.java
@@ -687,6 +687,7 @@ public class MDLV2000Reader extends DefaultChemObjectReader {
             case 45: // hhh: hydrogen count + 1 [query]
             case 42: // sss: stereo parity
                 parity = toInt(line.charAt(41));
+            case 40:
             case 39: // ccc: charge
                 charge = toCharge(line.charAt(38));
             case 36: // dd: mass difference
@@ -942,6 +943,8 @@ public class MDLV2000Reader extends DefaultChemObjectReader {
                         int value = readMolfileInt(line, st + 4);
                         SPIN_MULTIPLICITY multiplicity = SPIN_MULTIPLICITY.ofValue(value);
 
+                        container.getAtom(offset + index).setProperty(CDKConstants.SPIN_MULTIPLICITY, multiplicity);
+
                         for (int e = 0; e < multiplicity.getSingleElectrons(); e++)
                             container.addSingleElectron(offset + index);
                     }
@@ -1202,6 +1205,14 @@ public class MDLV2000Reader extends DefaultChemObjectReader {
                     }
                     break;
 
+                // Data Sgroup Field Description [Sgroup]
+                // M SDT sss fff...fffgghhh...hhhiijjj...
+                // sss: Index of component Sgroup
+                case M_SDT:
+                    sgroup = ensureSgroup(sgroups, readMolfileInt(line, 7));
+                    sgroup.putValue(SgroupKey.CtabLabel, line.substring(11).trim());
+                    break;
+
                 // M  END
                 //
                 // This entry goes at the end of the properties block and is required for molfiles which contain a
